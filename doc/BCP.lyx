#LyX 1.6.7 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass article
\use_default_options true
\begin_modules
logicalmkup
\end_modules
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
BCP/ConcurrenTree Basics
\end_layout

\begin_layout Paragraph
This document is a continuous process of flux and being fleshed out.
 Direct any questions or complaints to Philip Horger at campadrenalin@gmail.com.
\end_layout

\begin_layout Part
ConcurrenTree Model
\end_layout

\begin_layout Standard
ConcurrenTree is a concurrent text technology that puts live text editing
 in everybody's hands with its simplicity, especially compared to competitors
 like Operational Transform.
 CTree code is easy to write, easy to port, and doesn't have algorithmic
 ambiguity.
\end_layout

\begin_layout Section
Trees
\end_layout

\begin_layout Standard
Trees are a fairly simple data structure at the core of ConcurrenTree.
 Just about every operation you can perform on a CTree document will traverse
 and/or modify trees, so it's good to get a nice solid understanding of
 them before rushing into the rest of this documentation.
 I mean, you can if you want, but you should learn to walk before you run,
 grasshoppa.
\end_layout

\begin_layout Standard
A tree consists (most importantly) of an immutable string and a boolean
 array called the 
\begin_inset Quotes eld
\end_inset

deletions array.
\begin_inset Quotes erd
\end_inset

 There's a boolean in the array for every character marking whether it's
 deleted or not.
\begin_inset Foot
status open

\begin_layout Plain Layout
One might ask why we don't just, you know, actually delete characters instead
 of having an immutable string.
 Good question, and there's a lot of interesting theory behind that - but
 it's mostly beyond the scope of this document.
 The headlines: we need to maintain our index positions in the face of deletions
, storing a char is basically as efficient as marking it deleted anyways,
 and it allows for consistent hashing throughout the lifetime of the tree.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The tree has a few more properties we have to worry about, though.
 The next biggest one (importance-wise, I mean) is the tree's children.
 The most conceptually accurate way to do this is as an array of string-key
 dictionaries, but there's nothing stopping you from finding more space-
 or memory-efficient ways to do it.
 What you're trying to model here is the fact that any arbitrary number
 of child trees can be attached to any index position
\begin_inset Foot
status open

\begin_layout Plain Layout
An index position represents a space between characters or on either end
 of the full string.
 So it can be any integer between (and including) 0 and 
\emph on
n
\emph default
 for a string of length 
\emph on
n.
\end_layout

\end_inset

 in the parent tree, and it can be found again given the key
\begin_inset Foot
status open

\begin_layout Plain Layout
Here meaning the key algorithm, which shortens long strings by turning any
 characters beyond them into the sum of that section of the string.
 Sum is another algorithm.
 There's a bunch of textual algorithms.
\end_layout

\end_inset

 of its original value and the index it's attached to.
\end_layout

\begin_layout Standard
Using these properties, we have a working plaintext model for which we can
 write algorithms that insert text (by adding children), delete text (by
 applying deletions), 
\begin_inset Quotes eld
\end_inset

flatten
\begin_inset Quotes erd
\end_inset

 the tree to a single resultant string, and convert a position in the resultant
 string to a position in the tree or its children.
 Expect a lot of recursion when we get to the algorithm section.
 If you don't like recursion, then tough, it's a fundamental programming
 concept and the right tool for this kind of job.
\end_layout

\begin_layout Section
Addresses
\end_layout

\begin_layout Standard
Addresses are really a set of directions that take you down through the
 descendants of a node.
 An address is a list of ints and strings.
 An int 
\emph on
p 
\emph default
means that the following key string refers to a child at position 
\emph on
p
\emph default
, otherwise, 
\emph on
p
\emph default
 is assumed to be the length of the parent (that is, the child is assumed
 to be at the last possible index position).
 So while multiple adjacent strings are okay, adjacent ints don't make sense.
\end_layout

\begin_layout Section
Instructions and Operations
\end_layout

\begin_layout Standard
One thing that CTree borrows from its 
\emph on
very
\emph default
 distant ancestor OT is the notion of instructions and operations.
 However, some neat properties of CTree make them a lot simpler.
 Operations never need to be 
\begin_inset Quotes eld
\end_inset

transformed
\begin_inset Quotes erd
\end_inset

, they can be applied on any machine in any state or queued until their
 dependencies are satisfied.
 It's even okay to do stuff more than once, since everything is designed
 to be idempotent - multiple applications of the same operation have the
 same effect as one.
\end_layout

\begin_layout Standard
But I'm getting ahead of myself.
 If you're reading this, you're probably new to the party.
 So don't panic, this stuff is simpler than it sounds.
\end_layout

\begin_layout Standard
Instructions are individual actions you can on a tree given an address and
 a few other parameters.
 Basically, the kind of stuff that takes one function call.
 Insert a child to a node, delete characters from a node, marker stuff,
 etc.
 So there's not too many types of instructions to worry about, and we'll
 get into them individually with sample algorithms soon enough.
\end_layout

\begin_layout Standard
An operation is a sequence of instructions.
 You can write functions that analyze the instructions to figure out the
 dependencies of an operation (what nodes have to be in a tree before the
 operation makes sense/can be applied), you can operation merging functions,
 but ultimately, an operation is a vector.
 Nothing more, nothing less.
\end_layout

\begin_layout Standard
So, you might be wondering why we even bothered to use terminology for this
 stuff.
 The reason is serialization.
 Instructions and operations can be serialized to JSON in a consistent fashion
 that allows them to be transferred between machines and applications, and
 quite importantly, can be hash-checked to see if it's already been applied.
\end_layout

\begin_layout Standard
But no worries if it's got overlap with stuff you've already applied to
 your tree! A few CPU cycles wasted, but no harm done.
 Everything will merge together correctly and not increase memory usage
 with the overlap.
\end_layout

\begin_layout Standard
There's also a built-in transactional benefit to operations, letting you
 bundle together instructions that should apply more or less at once and
 have semantic relatedness, allowing you a little control in a world of
 unpredictable application order, personal view, and eventual consistency.
 There's no real safety benefit to transactions in CTree though, so they
 are not nearly as useful here as in other situations.
\end_layout

\begin_layout Section
Incremental collapsation/expansion
\end_layout

\begin_layout Standard
ConcurrenTree's magic 
\begin_inset Quotes eld
\end_inset

secret
\begin_inset Quotes erd
\end_inset

 formula is that on a conceptual level, information cannot be deleted.
 It can only increase or overwrite in fairly non-destructive ways.
\end_layout

\begin_layout Standard
Yeah, that look of horror and the memory usage panics running through your
 head are normal.
 We had 'em too during the development process.
 It sounds like the data storage requirements of a single document would
 eventually spiral out of control, especially in live-typing situations
 where you very quickly get deeply-structured trees of small nodes with
 a scary overhead-to-data ratio.
\end_layout

\begin_layout Standard
Well, the good news is that we fixed it.
 It's not even all that complicated.
 Each node can be flattened down temporarily to free up memory, and the
 lost information retrieved from another source if necessary.
 The data structure for a flat node is just the key, the flattened value,
 and the treesum of the original tree.
 We'll get into the details of the treesum algorithm in Part IV, but it's
 used to test equivalence/syncronicity between copies of a tree even if
 it or its descendants have been flattened.
\end_layout

\begin_layout Standard
Be aware that if you simplify your local data this way, and are unable to
 get a nonflattened copy of the node later, you won't be able to apply operation
s that address the data you simplified away.
 Only collapse nodes into flats if you're sure you'll be able to reconstitute
 them when you need to.
\end_layout

\begin_layout Standard
Other than that, flat nodes are quite useful.
 They let you send a remote entity the flat version of a document first,
 and then supply them with more detailed data as they need and request it
 - in turn, allowing the remote end to immediately load and visualize, while
 collecting the detailed information needed to create and apply operations
 in the background.
\end_layout

\begin_layout Part
Tree Algorithms
\end_layout

\begin_layout Standard
The ConcurrenTree model is designed so that you can figure out algorithms
 from scratch correctly without a reference, but it's still useful to have
 some examples.
 These algorithms to not do any sanity or validity checking, for the sake
 of simplicity, so while they may be easier to read than the source code
 in the repository, they're also a bit brittle, and for educational purposes
 only.
\end_layout

\begin_layout Section
find
\end_layout

\begin_layout Standard
This resolves an address to a node object in memory using recursion.
 It's the foundation of other document-level algorithms (which are really
 just shortcuts to tree-level actions in most cases).
\end_layout

\begin_layout Quote
tree::resolve(string address) {
\end_layout

\begin_deeper
\begin_layout Quote
// isolate top-level piece
\end_layout

\begin_layout Quote
string top = everything to the left of the first 
\begin_inset Quotes eld
\end_inset

/
\begin_inset Quotes erd
\end_inset

;
\end_layout

\begin_layout Quote
address = everything after it;
\end_layout

\begin_layout Quote
if (address ==
\begin_inset Quotes erd
\end_inset


\begin_inset Quotes erd
\end_inset

) return this;
\end_layout

\begin_layout Quote
tree next;
\end_layout

\begin_layout Quote
if top[0] == 
\begin_inset Quotes eld
\end_inset

#
\begin_inset Quotes erd
\end_inset

 {
\end_layout

\begin_deeper
\begin_layout Quote
// shortcut address
\end_layout

\begin_layout Quote
next = this.document.shortcuts[top];
\end_layout

\end_deeper
\begin_layout Quote
} else {
\end_layout

\begin_deeper
\begin_layout Quote
int index = top.split(
\begin_inset Quotes eld
\end_inset

:
\begin_inset Quotes erd
\end_inset

)[0];
\end_layout

\begin_layout Quote
string child = top.split(
\begin_inset Quotes eld
\end_inset

:
\begin_inset Quotes erd
\end_inset

)[1];
\end_layout

\begin_layout Quote
next = this.children[index][child];
\end_layout

\end_deeper
\begin_layout Quote
}
\end_layout

\begin_layout Quote
return next.resolve(address);
\end_layout

\end_deeper
\begin_layout Quote
}
\end_layout

\begin_layout Section
trace
\end_layout

\begin_layout Standard
The trace algorithm takes a position in a resultant string and converts
 it into an (address, index) pair representing an index position in a specific
 node.
 This allows you to do all your other operations in result-space, for example,
 inserting text to a position in the displayed resultant text.
\end_layout

\begin_layout Standard
While it's one of the most fundamentally useful algorithms, it can also
 be one of the most complicated in strongly typed languages.
 In JavaScript and Python, we like to rely on the return type to imply results
 as well as the value - did we find the end result, or should we just shave
 off some of the total we're trying to reach - which handles things very
 efficiently in terms of computation.
 This is a big deal for functions called as much as trace, especially when
 the language is interpreted.
\end_layout

\begin_layout Standard
If you pass the target total as an int pointer, and return a null pointer
 when the target is not among the current node's descendants, you can get
 around this in an even more efficient way, but it requires a pointer-aware
 language (or at least one where you can hack it to pass an int by reference).
 This is what we give an example of below.
 Most of this carries over quite well to a return-type-based approach like
 we talked about earlier, most notably the loop design.
\end_layout

\begin_layout Quote
tree::trace(int* target) {
\end_layout

\begin_deeper
\begin_layout Quote
for (int i in this.children) {
\end_layout

\begin_deeper
\begin_layout Quote
for (string x in this.children[i]) {
\end_layout

\begin_deeper
\begin_layout Quote
dict result = this.children[i][x].trace(target);
\end_layout

\begin_layout Quote
if (result != null) {
\end_layout

\begin_deeper
\begin_layout Quote
result[
\begin_inset Quotes eld
\end_inset

address
\begin_inset Quotes erd
\end_inset

] = string(i) + 
\begin_inset Quotes erd
\end_inset

:
\begin_inset Quotes erd
\end_inset

 + x + 
\begin_inset Quotes erd
\end_inset

/
\begin_inset Quotes erd
\end_inset

 + result[address];
\end_layout

\begin_layout Quote
return result;
\end_layout

\end_deeper
\begin_layout Quote
}
\end_layout

\end_deeper
\begin_layout Quote
}
\end_layout

\begin_layout Quote
if (i<this.children.length) {
\end_layout

\begin_deeper
\begin_layout Quote
/* remember, there's more indexes than characters, we have to be careful
 not to access characters that don't exist! */
\end_layout

\begin_layout Quote
if (this.deleted[i]) &target--;
\end_layout

\begin_layout Quote
if (&target ==0) return {
\begin_inset Quotes erd
\end_inset

tree
\begin_inset Quotes erd
\end_inset

:this,
\begin_inset Quotes erd
\end_inset

pos
\begin_inset Quotes erd
\end_inset

:i, 
\begin_inset Quotes eld
\end_inset

address
\begin_inset Quotes erd
\end_inset

:
\begin_inset Quotes erd
\end_inset


\begin_inset Quotes erd
\end_inset

};
\end_layout

\end_deeper
\begin_layout Quote
}
\end_layout

\end_deeper
\begin_layout Quote
}
\end_layout

\end_deeper
\begin_layout Quote
}
\end_layout

\begin_layout Section
insert
\end_layout

\begin_layout Standard
By now you can probably figure this out from the context of the previous
 algorithms, but here we go in case you're skipping around or in over your
 head.
 The tree-level insert function is brilliantly simple, although it is omitting
 the constructor for the subtree from a string.
\end_layout

\begin_layout Quote
tree::insert(int pos, tree* subtree) {
\end_layout

\begin_deeper
\begin_layout Quote
// how you want to do pointers and
\end_layout

\begin_layout Quote
// references is up to you, here.
\end_layout

\begin_layout Quote
this.children[pos][subtree->hash] = subtree;
\end_layout

\begin_layout Quote
// optional step if you want nodes to
\end_layout

\begin_layout Quote
// be parent-aware for any reason
\end_layout

\begin_layout Quote
subtree.parent = &this;
\end_layout

\end_deeper
\begin_layout Quote
}
\end_layout

\begin_layout Standard
The document-level insert algorithm on the other hand is fairly simple as
 well, but in a different way.
 Instead of directly affecting the tree, document-level functions return
 operations, which allows you to easily translate from display actions 
\emph on
and
\emph default
 keep track of local and foreign operations.
\end_layout

\begin_layout Quote
document::insert(int pos, string contents) {
\end_layout

\begin_deeper
\begin_layout Quote
dict trace_results = this.root.trace(pos);
\end_layout

\begin_layout Quote
return new operation([
\end_layout

\begin_deeper
\begin_layout Quote
new insertion(
\end_layout

\begin_deeper
\begin_layout Quote
trace_results[
\begin_inset Quotes eld
\end_inset

pos
\begin_inset Quotes erd
\end_inset

],
\end_layout

\begin_layout Quote
trace_results[
\begin_inset Quotes eld
\end_inset

address
\begin_inset Quotes erd
\end_inset

]
\end_layout

\begin_layout Quote
);
\end_layout

\end_deeper
\end_deeper
\begin_layout Quote
]);
\end_layout

\end_deeper
\begin_layout Quote
}
\end_layout

\begin_layout Section
delete
\end_layout

\begin_layout Standard
Again, we're gonna show off multiple algorithms, like we did for insert,
 starting with our beloved tree.
\end_layout

\begin_layout Quote
tree::delete(int pos) {
\end_layout

\begin_deeper
\begin_layout Quote
self.deletions[pos] = true;
\end_layout

\end_deeper
\begin_layout Quote
}
\end_layout

\begin_layout Standard
Yep.
 That was easy.
 Now the document-level algorithm:
\end_layout

\begin_layout Quote
document::delete(int pos) {
\end_layout

\begin_deeper
\begin_layout Quote
dict trace_results = this.root.trace(pos);
\end_layout

\begin_layout Quote
return new operation([
\end_layout

\begin_deeper
\begin_layout Quote
new deletion(
\end_layout

\begin_deeper
\begin_layout Quote
trace_results[
\begin_inset Quotes eld
\end_inset

pos
\begin_inset Quotes erd
\end_inset

],
\end_layout

\begin_layout Quote
trace_results[
\begin_inset Quotes eld
\end_inset

address
\begin_inset Quotes erd
\end_inset

]
\end_layout

\begin_layout Quote
);
\end_layout

\end_deeper
\end_deeper
\begin_layout Quote
]);
\end_layout

\end_deeper
\begin_layout Quote
}
\end_layout

\begin_layout Standard
Basically document::insert copied, pasted, and very slightly modified.
 In fact, if you want to generalize code like this into another function
 and be a better code reuser, you're highly welcome to, as it'll make your
 life a bit easier should you ever need to maintain these parts of the codebase.
\end_layout

\begin_layout Part
BCP Basics
\end_layout

\begin_layout Standard
Basic ConcurrenTree Protocol is a protocol specification for transferring
 and syncronizing CTree documents.
 The syntax is not too hard to learn - it's just a bidirectional stream
 of JSON objects called 
\begin_inset Quotes eld
\end_inset

messages.
\begin_inset Quotes erd
\end_inset

 Each message always has a required property called 
\begin_inset Quotes eld
\end_inset

type
\begin_inset Quotes erd
\end_inset

, and messages are separated by null bytes.
\end_layout

\begin_layout Standard
BCP can be used over any stream where packet order can be guaranteed, for
 example TCP sockets.
 For browser-based CTree systems, one might find a lot of usefulness with
 Socket.IO, Node.js, and the Javascript library provided in the ConcurrenTree/Orch
ard repository.
\end_layout

\begin_layout Standard
If you want to write your own BCP interpreter in your language of choice
 (and good for you, you awesome person), you're gonna find the BCP Message
 Set reference document in the repository 
\emph on
very
\emph default
 handy.
 It details every message type with examples and everything, and even if
 you're just going to use an existing BCP library, you might find it interesting
 reading to see how things work under the hood.
\end_layout

\begin_layout Section
Documents
\end_layout

\begin_layout Standard
A document is a tree 0 characters long and with a name.
 Names are arbitrary strings, so any name scheme is possible, though anything
 more specific is yet to be determined.
\end_layout

\begin_layout Standard
Because each document is, alone, identical in its simplicity, a remote end
 can safely assume a blank document when you select an unknown docname from
 them, allowing you to add children to the document.
 If you give it any ops with dependencies it doesn't have, it will start
 trying to synchronize tree state with you, and find other peers to sync
 with.
\end_layout

\begin_layout Standard
Care should be taken with docnames.
 The network is your namespace, and unless you've added some sort of collision
 prevention in your name scheme (like another layer of namespacing or two),
 you will probably eventually find the problems involved with two separate,
 unrelated documents by the same name.
 When the machines with these two documents realize they can sync with each
 other, they will, resulting in an amalgamated result document which will
 usually be the contents of one document followed by the contents of the
 other, with the order determined by the hashes of the low-level trees.
\end_layout

\begin_layout Standard
So, you might be wondering why a 404 error would even still be relevant
 to this system? Well, BCP is designed to be flexible, universally usable
 for any CTree model concurrency software.
 And in some scenarios, a 404 error might be preferable to our idea of 
\begin_inset Quotes eld
\end_inset

standard behavior.
\begin_inset Quotes erd
\end_inset

 So it stays in for 3rd party use, but we don't use it.
\end_layout

\begin_layout Section
Peer State
\end_layout

\begin_layout Standard
Maintaining a connection in BCP does require tracking a minimalist set of
 state for each end of the connection.
 For each end of the connection, you need to store the selected docname,
 subscriptions, any operations you advertise to the remote, a little authorizati
on state, and optionally, the op hashes you know have been applied at that
 end.
\end_layout

\begin_layout Part
Hash algorithms
\end_layout

\begin_layout Standard
The following are the hashing algorithms used in BCP.
 They're designed for simplicity, not perfection, so that anyone can convert
 them into another programming language in a mere 20 minutes.
 The examples are written in Python.
\end_layout

\begin_layout Section
sum
\end_layout

\begin_layout Standard
A barely-cryptographic super-simple hash algorithm that turns a string into
 a number using the ascii values of the characters.
\end_layout

\begin_layout Quote
def sum(string):
\end_layout

\begin_deeper
\begin_layout Quote
s = 0
\end_layout

\begin_layout Quote
modulo = 2**16
\end_layout

\begin_layout Quote
for (i in string):
\end_layout

\begin_deeper
\begin_layout Quote
s = (s*s + ord(i)) % modulo
\end_layout

\end_deeper
\begin_layout Quote
return s
\end_layout

\end_deeper
\begin_layout Section
key
\end_layout

\begin_layout Standard
A function that takes tree values and returns the key you should use to
 store them as children.
 For less than or equal to 10 characters, it's equal to the original string,
 for more than 10 the excess is run through the sum function, converted
 to a string, and appended to the first 10 characters.
\end_layout

\begin_layout Quote
def key(string):
\end_layout

\begin_deeper
\begin_layout Quote
if len(string)>10:
\end_layout

\begin_deeper
\begin_layout Quote
return string[:10]+str(sum(string[10:]))
\end_layout

\end_deeper
\begin_layout Quote
else:
\end_layout

\begin_deeper
\begin_layout Quote
return string
\end_layout

\end_deeper
\end_deeper
\begin_layout Section
strict
\end_layout

\begin_layout Standard
JSON is great.
 It can store just about anything, and in a logical way.
 However, if we want to make sure that 2 JSON objects are equal without
 sending a full copy over the wire, we have to have a checksum algorithm,
 and to do that, we need to make sure 2 equivalent objects can ONLY be expressed
 the same way.
\end_layout

\begin_layout Standard
So arbitrary whitespace and key order are the devil, as they allow equivalent
 objects to be serialized differently without being different.
 The following code converts Python objects to JSON in a consistent way
 according to the following rules: no whitespace, and keys ordered by the
 standard string-sorting algorithm (you know, that superset of alphabetization
 available for string comparison in every platform and language).
\end_layout

\begin_layout Standard
The example below does not rely on the Python json module at all, unlike
 the util.hasher.strict implementation in the ConcurrenTree library.
 While it is not strictly necessary to have a JSON library to strict a JSON
 object, it can save a few lines of code.
\end_layout

\begin_layout Quote
def strict(obj):
\end_layout

\begin_deeper
\begin_layout Quote
if obj==True:
\end_layout

\begin_deeper
\begin_layout Quote
return 
\begin_inset Quotes eld
\end_inset

true
\begin_inset Quotes erd
\end_inset


\end_layout

\end_deeper
\begin_layout Quote
if obj==False:
\end_layout

\begin_deeper
\begin_layout Quote
return 
\begin_inset Quotes eld
\end_inset

false
\begin_inset Quotes erd
\end_inset


\end_layout

\end_deeper
\begin_layout Quote
if obj==None:
\end_layout

\begin_deeper
\begin_layout Quote
return 
\begin_inset Quotes eld
\end_inset

null
\begin_inset Quotes erd
\end_inset


\end_layout

\end_deeper
\begin_layout Quote
if type(obj)==int:
\end_layout

\begin_deeper
\begin_layout Quote
return str(int)
\end_layout

\end_deeper
\begin_layout Quote
if type(obj)==str:
\end_layout

\begin_deeper
\begin_layout Quote
return '
\begin_inset Quotes erd
\end_inset

'+obj+'
\begin_inset Quotes erd
\end_inset

'
\end_layout

\end_deeper
\begin_layout Quote
if type(obj)==list:
\end_layout

\begin_deeper
\begin_layout Quote
elements= [strict(x) for x in list]
\end_layout

\begin_layout Quote
return 
\begin_inset Quotes eld
\end_inset

[%s]
\begin_inset Quotes erd
\end_inset

 % 
\begin_inset Quotes eld
\end_inset

,
\begin_inset Quotes erd
\end_inset

.join[elements]
\end_layout

\end_deeper
\begin_layout Quote
if type(obj)==dict:
\end_layout

\begin_deeper
\begin_layout Quote
strdict = {}
\end_layout

\begin_layout Quote
for k in obj.keys():
\end_layout

\begin_deeper
\begin_layout Quote
strdict[str(k)] = obj[k]
\end_layout

\end_deeper
\begin_layout Quote
keys = strdict.keys()
\end_layout

\begin_layout Quote
keys.sort()
\end_layout

\begin_layout Quote
def element(k,d):
\end_layout

\begin_deeper
\begin_layout Quote
return strict(k)+
\begin_inset Quotes erd
\end_inset

:
\begin_inset Quotes erd
\end_inset

+strict(d[k])
\end_layout

\end_deeper
\begin_layout Quote
elements = 
\begin_inset Quotes eld
\end_inset

,
\begin_inset Quotes erd
\end_inset

.join[element(k, strdict) for k in keys]
\end_layout

\begin_layout Quote
return 
\begin_inset Quotes eld
\end_inset

{%s}
\begin_inset Quotes erd
\end_inset

 % elements
\end_layout

\end_deeper
\begin_layout Quote
else:
\end_layout

\begin_deeper
\begin_layout Quote
raise TypeError(obj)
\end_layout

\end_deeper
\end_deeper
\begin_layout Section
checksum
\end_layout

\begin_layout Standard
A convenience function that turns an object into a verification sum.
 It's by far the simplest one in the BCP hashing toolbox.
\end_layout

\begin_layout Quote
def checksum(obj):
\end_layout

\begin_deeper
\begin_layout Quote
return sum(strict(obj))
\end_layout

\end_deeper
\begin_layout Section
treesum
\end_layout

\begin_layout Standard
The treesum of a tree node is the checksum of its Summable representation
 (see BCP Message Set documenation).
 The treesum is specific to trees, but is also the best way to equivalence
 test them since Summables can be generated with very little child data.
\end_layout

\end_body
\end_document
