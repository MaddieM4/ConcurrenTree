#LyX 1.6.7 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass article
\use_default_options true
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
BCP Message Set
\end_layout

\begin_layout Paragraph
This document is a continuous process of flux and being fleshed out.
 Direct any questions or complaints to Philip Horger at campadrenalin@gmail.com.
\end_layout

\begin_layout Part
Transfer of live data
\end_layout

\begin_layout Section
select
\end_layout

\begin_layout Standard
Until next 
\begin_inset Quotes eld
\end_inset

select
\begin_inset Quotes erd
\end_inset

 message, all document-specific messages will apply to the given docname.
\end_layout

\begin_layout Quote
{
\begin_inset Quotes erd
\end_inset

type
\begin_inset Quotes erd
\end_inset

:
\begin_inset Quotes erd
\end_inset

select
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

docname
\begin_inset Quotes erd
\end_inset

:
\begin_inset Quotes erd
\end_inset

willynelson
\begin_inset Quotes erd
\end_inset

}
\end_layout

\begin_layout Section
op
\end_layout

\begin_layout Standard
An operation, consisting of a list of instructions.
\end_layout

\begin_layout Quote
{
\begin_inset Quotes erd
\end_inset

type
\begin_inset Quotes erd
\end_inset

:
\begin_inset Quotes erd
\end_inset

op
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

instructions
\begin_inset Quotes erd
\end_inset

:[ ...
 ]}
\end_layout

\begin_layout Section
ad
\end_layout

\begin_layout Standard
A message that tells other clients that it has an operation ready to read.
 This is more time- and bandwidth-efficient than broadcasting an op to machines
 that likely already have it.
 For this reason, clients 
\emph on
should
\emph default
 straight-broadcast ops that originate from them, and advertise ops from
 other sources.
 
\begin_inset Foot
status open

\begin_layout Plain Layout
Be advised that this, like all references to hashing in this document, refers
 to the checksum() function described in the general BCP documentation.
\end_layout

\end_inset


\end_layout

\begin_layout Quote
{
\begin_inset Quotes erd
\end_inset

type
\begin_inset Quotes erd
\end_inset

:
\begin_inset Quotes erd
\end_inset

ad
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

hash
\begin_inset Quotes erd
\end_inset

:
\begin_inset Quotes erd
\end_inset

7344
\begin_inset Quotes erd
\end_inset

}
\end_layout

\begin_layout Section
getop
\end_layout

\begin_layout Standard
The reaction message to 
\begin_inset Quotes eld
\end_inset

ad
\begin_inset Quotes erd
\end_inset

.
 As you might guess, it requests an op message by a hash.
\end_layout

\begin_layout Quote
{
\begin_inset Quotes erd
\end_inset

type
\begin_inset Quotes erd
\end_inset

:
\begin_inset Quotes erd
\end_inset

getop
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

hash
\begin_inset Quotes erd
\end_inset

:
\begin_inset Quotes erd
\end_inset

7344
\begin_inset Quotes erd
\end_inset

}
\end_layout

\begin_layout Part
Syncronization/Merging
\end_layout

\begin_layout Section
check
\end_layout

\begin_layout Standard
Request for hashes of eras of the currently selected tree.
 The 
\begin_inset Quotes eld
\end_inset

eras
\begin_inset Quotes erd
\end_inset

 property may be an int or a range (2-element array).
 -1 is a special value that means 
\begin_inset Quotes eld
\end_inset

the highest era you know is in the document
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Quote
{
\begin_inset Quotes erd
\end_inset

type
\begin_inset Quotes erd
\end_inset

:
\begin_inset Quotes erd
\end_inset

check
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

eras
\begin_inset Quotes erd
\end_inset

:5}
\end_layout

\begin_layout Quote
{
\begin_inset Quotes erd
\end_inset

type
\begin_inset Quotes erd
\end_inset

:
\begin_inset Quotes erd
\end_inset

check
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

eras
\begin_inset Quotes erd
\end_inset

:[1,2]}
\end_layout

\begin_layout Section
thash
\end_layout

\begin_layout Standard
\begin_inset Quotes eld
\end_inset

Tree hash,
\begin_inset Quotes erd
\end_inset

 the response to 
\begin_inset Quotes eld
\end_inset

check
\begin_inset Quotes erd
\end_inset

.
 
\begin_inset Quotes eld
\end_inset

eras
\begin_inset Quotes erd
\end_inset

 will always be a dictionary with era numbers for keys and int checksums
 for values.
 Any ranges will be expanded by the server into individual era numbers.
 The checksums are of Era objects, as described in Part IV of this document.
\end_layout

\begin_layout Quote
{
\begin_inset Quotes erd
\end_inset

type
\begin_inset Quotes erd
\end_inset

:
\begin_inset Quotes erd
\end_inset

thash
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

eras
\begin_inset Quotes erd
\end_inset

:{
\begin_inset Quotes erd
\end_inset

1
\begin_inset Quotes erd
\end_inset

:44263...}}
\end_layout

\begin_layout Section
get
\end_layout

\begin_layout Standard
A request for one or more 
\begin_inset Quotes eld
\end_inset

era
\begin_inset Quotes erd
\end_inset

 responses.
 This can either be a 
\begin_inset Quotes eld
\end_inset

flat
\begin_inset Quotes erd
\end_inset

 or a 
\begin_inset Quotes eld
\end_inset

tree
\begin_inset Quotes erd
\end_inset

, denoting whether to send the flattened result of all previous eras, or
 send the actual eras themselves.
 If the property 
\begin_inset Quotes eld
\end_inset

flat
\begin_inset Quotes erd
\end_inset

 is used, it must be an int.
 If the property 
\begin_inset Quotes eld
\end_inset

tree
\begin_inset Quotes erd
\end_inset

 is used, it's in the same format as the 
\begin_inset Quotes eld
\end_inset

eras
\begin_inset Quotes erd
\end_inset

 property for the 
\begin_inset Quotes eld
\end_inset

check
\begin_inset Quotes erd
\end_inset

 message.
 Both can be used in the same message.
\end_layout

\begin_layout Quote
{
\begin_inset Quotes erd
\end_inset

type
\begin_inset Quotes erd
\end_inset

:
\begin_inset Quotes erd
\end_inset

get
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

flat
\begin_inset Quotes erd
\end_inset

:5}
\end_layout

\begin_layout Quote
{
\begin_inset Quotes erd
\end_inset

type
\begin_inset Quotes erd
\end_inset

:
\begin_inset Quotes erd
\end_inset

get
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

tree
\begin_inset Quotes erd
\end_inset

:[9,-1]}
\end_layout

\begin_layout Quote
// or, as a single message
\end_layout

\begin_layout Quote
{
\begin_inset Quotes erd
\end_inset

type
\begin_inset Quotes erd
\end_inset

:
\begin_inset Quotes erd
\end_inset

get
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

flat
\begin_inset Quotes erd
\end_inset

:5,
\begin_inset Quotes eld
\end_inset

tree
\begin_inset Quotes erd
\end_inset

:[9,-1]}
\end_layout

\begin_layout Section
era
\end_layout

\begin_layout Standard
A concisely-constructed representation of an era.
 While this 
\emph on
can
\emph default
 be expressed as an operation, this would be fairly bulky compared to a
 purely structural view.
 It's a right-tool-for-the-right-job situation.
 Ops modify, eras declare.
\end_layout

\begin_layout Standard
While a 
\begin_inset Quotes eld
\end_inset

get
\begin_inset Quotes erd
\end_inset

 can request a lot of stuff at once, each 
\begin_inset Quotes eld
\end_inset

era
\begin_inset Quotes erd
\end_inset

 response can only send one thing at a time.
\end_layout

\begin_layout Quote
{
\begin_inset Quotes erd
\end_inset

type
\begin_inset Quotes erd
\end_inset

:
\begin_inset Quotes erd
\end_inset

era
\begin_inset Quotes erd
\end_inset

,
\begin_inset Quotes erd
\end_inset

subtype
\begin_inset Quotes erd
\end_inset

:
\begin_inset Quotes erd
\end_inset

flat
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

layer
\begin_inset Quotes erd
\end_inset

:5,
\begin_inset Quotes erd
\end_inset

flat
\begin_inset Quotes erd
\end_inset

:[...]}
\end_layout

\begin_layout Quote
{
\begin_inset Quotes erd
\end_inset

type
\begin_inset Quotes erd
\end_inset

:
\begin_inset Quotes erd
\end_inset

era
\begin_inset Quotes erd
\end_inset

,
\begin_inset Quotes erd
\end_inset

subtype
\begin_inset Quotes erd
\end_inset

:
\begin_inset Quotes erd
\end_inset

tree
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes erd
\end_inset

layer
\begin_inset Quotes erd
\end_inset

:9,
\begin_inset Quotes erd
\end_inset

era
\begin_inset Quotes erd
\end_inset

:{...}}
\end_layout

\begin_layout Part
Notifications
\end_layout

\begin_layout Standard
There is a bit of functional overlap between this and Part I (live transfer).
 Just remember that you still have to subscribe to a document for other
 machines to send live updates of any kind to you.
\end_layout

\begin_layout Section
subscribe
\end_layout

\begin_layout Standard
There are different levels of subscription: 
\emph on
oponly, live
\emph default
, and 
\emph on
notify
\emph default
.
 A document can only be subscribed as one at a time, so subscribing to something
 twice will put it in whatever level was used the second time, overwriting
 the level of the previous subscription.
\end_layout

\begin_layout Description
oponly is exactly what it sounds like.
 Don't bother sending ads, always send the operation directly and save a
 round trip by assuming the op has not been recieved from another source.
\end_layout

\begin_layout Description
live means that the remote end will send operations (or ads) as soon as
 they happen, and ads when the operation is secondhand.
 This is the default mode, and will be assumed if no 
\begin_inset Quotes eld
\end_inset

subtype
\begin_inset Quotes erd
\end_inset

 argument is present.
\end_layout

\begin_layout Description
notify means that only ads will be sent.
\end_layout

\begin_layout Quote
{
\begin_inset Quotes erd
\end_inset

type
\begin_inset Quotes erd
\end_inset

:
\begin_inset Quotes erd
\end_inset

subscribe
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

subtype
\begin_inset Quotes erd
\end_inset

:
\begin_inset Quotes erd
\end_inset

live
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

docnames
\begin_inset Quotes erd
\end_inset

:[
\begin_inset Quotes eld
\end_inset

willynelson
\begin_inset Quotes erd
\end_inset

]}
\end_layout

\begin_layout Section
unsubscribe
\end_layout

\begin_layout Standard
Disable any subscription on the given docnames.
 
\emph on
Warning: sending an empty list will disable all subscriptions from the remote
 end to you, so never send this if you don't mean it!
\end_layout

\begin_layout Quote
{
\begin_inset Quotes erd
\end_inset

type
\begin_inset Quotes erd
\end_inset

:
\begin_inset Quotes erd
\end_inset

unsubscribe
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

docnames
\begin_inset Quotes erd
\end_inset

:[
\begin_inset Quotes eld
\end_inset

The Event
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

Smallville
\begin_inset Quotes erd
\end_inset

]}
\end_layout

\begin_layout Quote
{
\begin_inset Quotes erd
\end_inset

type
\begin_inset Quotes erd
\end_inset

:
\begin_inset Quotes erd
\end_inset

unsubscribe
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

docnames
\begin_inset Quotes erd
\end_inset

:[]} // unsubscribes you from everything
\end_layout

\begin_layout Part
Authorization
\end_layout

\begin_layout Section
login
\end_layout

\begin_layout Standard
The BCP authorization system uses, for the most part, the private/public
 key model.
 The login message is provided as an alternative for more traditional username/p
assword scenarios.
\end_layout

\begin_layout Standard
The response to a correct login is an authok with no 
\begin_inset Quotes eld
\end_inset

key
\begin_inset Quotes erd
\end_inset

 property.
 Incorrect logins should trigger an error.
\end_layout

\begin_layout Quote
{
\begin_inset Quotes erd
\end_inset

type
\begin_inset Quotes erd
\end_inset

:
\begin_inset Quotes erd
\end_inset

login
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes erd
\end_inset

username
\begin_inset Quotes erd
\end_inset

:
\begin_inset Quotes erd
\end_inset

philip
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes erd
\end_inset

password
\begin_inset Quotes erd
\end_inset

:
\begin_inset Quotes erd
\end_inset

bukket
\begin_inset Quotes erd
\end_inset

}
\end_layout

\begin_layout Section
auth
\end_layout

\begin_layout Standard
A request for an MEL of a random string.
 A live BCP node can only authorize for documents it's a part of/knows the
 participants of.
\end_layout

\begin_layout Quote
{
\begin_inset Quotes erd
\end_inset

type
\begin_inset Quotes erd
\end_inset

:
\begin_inset Quotes erd
\end_inset

auth
\begin_inset Quotes erd
\end_inset

,
\begin_inset Quotes erd
\end_inset

docname
\begin_inset Quotes erd
\end_inset

:
\begin_inset Quotes erd
\end_inset

willynelson
\begin_inset Quotes erd
\end_inset

}
\end_layout

\begin_layout Section
authmel
\end_layout

\begin_layout Standard
The response to an auth request.
 It's a random string encoded into an MEL (multiply-encoded list, where
 each element is the plaintext data encoded in a different participant's
 public key).
\end_layout

\begin_layout Quote
{
\begin_inset Quotes erd
\end_inset

type
\begin_inset Quotes erd
\end_inset

:
\begin_inset Quotes erd
\end_inset

authmel
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes erd
\end_inset

docname
\begin_inset Quotes erd
\end_inset

:
\begin_inset Quotes erd
\end_inset

willynelson
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

mel
\begin_inset Quotes erd
\end_inset

:[ ...
 ]}
\end_layout

\begin_layout Section
authmd
\end_layout

\begin_layout Standard
Response to authmel.
 It's a list of decrypted strings, one of which hopefully will match the
 random string.
 It stands for Authorization MEL Decrypted.
\end_layout

\begin_layout Quote
{
\begin_inset Quotes erd
\end_inset

type
\begin_inset Quotes erd
\end_inset

:
\begin_inset Quotes erd
\end_inset

authmd
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes erd
\end_inset

docname
\begin_inset Quotes erd
\end_inset

:
\begin_inset Quotes erd
\end_inset

willynelson
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

mel
\begin_inset Quotes erd
\end_inset

:[ ...
 ]}
\end_layout

\begin_layout Section
authok
\end_layout

\begin_layout Standard
The final part of the auth dance.
 The server sends the client the symmetric key of the document.
\end_layout

\begin_layout Quote
{
\begin_inset Quotes erd
\end_inset

type
\begin_inset Quotes erd
\end_inset

:
\begin_inset Quotes erd
\end_inset

authok
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

docname
\begin_inset Quotes erd
\end_inset

:
\begin_inset Quotes erd
\end_inset

willynelson
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

key
\begin_inset Quotes erd
\end_inset

:
\begin_inset Quotes erd
\end_inset

...
\begin_inset Quotes erd
\end_inset

}
\end_layout

\begin_layout Section
lookup
\end_layout

\begin_layout Standard
Look up metadata about something, found by an identifier.
 The identifier will vary in type and format based on how you're using BCP,
 it can be whatever you want as long as you're consistent.
 In ECP, for example, we use a public key for finding people.
 Example subtypes are 
\emph on
person
\emph default
 and 
\emph on
document.
\end_layout

\begin_layout Quote
{
\begin_inset Quotes erd
\end_inset

type
\begin_inset Quotes erd
\end_inset

:
\begin_inset Quotes erd
\end_inset

lookup
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

subtype
\begin_inset Quotes erd
\end_inset

:
\begin_inset Quotes erd
\end_inset

person
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes erd
\end_inset

id
\begin_inset Quotes erd
\end_inset

:
\begin_inset Quotes erd
\end_inset

philip.horger
\begin_inset Quotes erd
\end_inset

}
\end_layout

\begin_layout Section
metadata
\end_layout

\begin_layout Standard
The response to 
\begin_inset Quotes eld
\end_inset

lookup
\begin_inset Quotes erd
\end_inset

.
 The only defined properties are 
\begin_inset Quotes eld
\end_inset

id
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

name
\begin_inset Quotes erd
\end_inset

, the latter of which can be either a string or a dictionary (for things
 like last name, first name, and username).
 It's really open-ended for a reason - you can use it for anything you want.
 Obviously you have to be self-consistent, though!
\end_layout

\begin_layout Quote
{
\begin_inset Quotes erd
\end_inset

type
\begin_inset Quotes erd
\end_inset

:
\begin_inset Quotes erd
\end_inset

metadata
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

id
\begin_inset Quotes erd
\end_inset

:
\begin_inset Quotes erd
\end_inset

philip.horger
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

name
\begin_inset Quotes erd
\end_inset

:{
\end_layout

\begin_deeper
\begin_layout Quote
\begin_inset Quotes eld
\end_inset

first
\begin_inset Quotes erd
\end_inset

:
\begin_inset Quotes erd
\end_inset

Philip
\begin_inset Quotes erd
\end_inset

,
\end_layout

\begin_layout Quote
\begin_inset Quotes eld
\end_inset

last
\begin_inset Quotes erd
\end_inset

:
\begin_inset Quotes erd
\end_inset

Horger
\begin_inset Quotes erd
\end_inset

,
\end_layout

\begin_layout Quote
\begin_inset Quotes eld
\end_inset

nick
\begin_inset Quotes erd
\end_inset

:
\begin_inset Quotes erd
\end_inset

Philip
\begin_inset Quotes erd
\end_inset


\end_layout

\end_deeper
\begin_layout Quote
}, 
\begin_inset Quotes eld
\end_inset

avatar
\begin_inset Quotes erd
\end_inset

:
\begin_inset Quotes erd
\end_inset

http://example.com/avatar.gif
\begin_inset Quotes erd
\end_inset

,
\end_layout

\begin_layout Quote
\begin_inset Quotes eld
\end_inset

hobby
\begin_inset Quotes erd
\end_inset

:
\begin_inset Quotes erd
\end_inset

Collecting decapitated teddy bears
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Quote
}
\end_layout

\begin_layout Part
Meta
\end_layout

\begin_layout Standard
Messages that contain messages.
 Well, except for 
\begin_inset Quotes eld
\end_inset

key
\begin_inset Quotes erd
\end_inset

, but it still seemed like the right place to put that one, so hush.
\end_layout

\begin_layout Section
part
\end_layout

\begin_layout Standard
In order to keep large messages from hanging a connection interminably,
 BCP enforces a very strict character limit: 2048 characters per message.
 This is more than enough for most messages, but for larger messages, it's
 the grim reaper.
\end_layout

\begin_layout Standard
Multipart messages are a simple way to send large messages without clogging
 the pipe or hitting the character limit.
 The example below is a segment of a large segmented message.
 The contained message is treated like a big string and will be evaluated
 as soon as a piece is sent with the property done set to true (this can
 be ommitted in any non-final piece).
\end_layout

\begin_layout Standard
While it supports the hashalgorithm property used for the 
\begin_inset Quotes eld
\end_inset

encrypted
\begin_inset Quotes erd
\end_inset

 message type, such precautions are much less likely to be necessary for
 the 
\begin_inset Quotes eld
\end_inset

part
\begin_inset Quotes erd
\end_inset

 message type.
\end_layout

\begin_layout Quote
{
\begin_inset Quotes erd
\end_inset

type
\begin_inset Quotes erd
\end_inset

:
\begin_inset Quotes erd
\end_inset

part
\begin_inset Quotes erd
\end_inset

,
\begin_inset Quotes erd
\end_inset

hash
\begin_inset Quotes erd
\end_inset

:
\begin_inset Quotes erd
\end_inset

44385
\begin_inset Quotes erd
\end_inset

,
\begin_inset Quotes erd
\end_inset

contents
\begin_inset Quotes erd
\end_inset

:
\begin_inset Quotes erd
\end_inset

...
\begin_inset Quotes erd
\end_inset

}
\end_layout

\begin_layout Section
encrypted
\end_layout

\begin_layout Standard
Ideally, you should run a BCP stream inside an encrypted connection (preferably
 point-to-point), instead of running encrypted messages over an unencrypted
 channel.
 Sometimes, though, that's not an option, and we want to make a standard
 mechanism for encryption in those use cases.
\end_layout

\begin_layout Standard
When there is a key for each end, the sender always encrypts with their
 private key first, then with the recipient's public key (the recipient
 decrypts this in reverse order).
 If the docname selected by the sending end refers to an encrypted document,
 they must add a layer of encryption with the document's symettric key beneath
 the endpoint encryption layers.
\end_layout

\begin_layout Standard
If you're using cryptography on your connection, you probably have support
 for advanced hashing algorithms on both ends, too.
 Not only that, but this is one of the few cases where the hashes actually
 need to be cryptographically secure.
 Therefore we give you a 
\begin_inset Quotes eld
\end_inset

hashalgorithm
\begin_inset Quotes erd
\end_inset

 property to indicate what you're encoding in, which the remote end can
 accept, or respond with an error that contains a list of all supported
 algorithms.
 
\begin_inset Quotes eld
\end_inset

default
\begin_inset Quotes erd
\end_inset

 is the BCP sum() function and should not be used for this.
 However, it is what will be assumed if you do not specify the algorithm
 (hashalgorithm is an optional property).
\end_layout

\begin_layout Quote
{
\begin_inset Quotes erd
\end_inset

type
\begin_inset Quotes erd
\end_inset

:
\begin_inset Quotes erd
\end_inset

encrypted
\begin_inset Quotes erd
\end_inset

,
\end_layout

\begin_layout Quote
\begin_inset Quotes erd
\end_inset

hash
\begin_inset Quotes erd
\end_inset

:
\begin_inset Quotes erd
\end_inset

0b00411f
\begin_inset Quotes erd
\end_inset

,
\end_layout

\begin_layout Quote
\begin_inset Quotes eld
\end_inset

hashalgorithm
\begin_inset Quotes erd
\end_inset

:
\begin_inset Quotes erd
\end_inset

md5
\begin_inset Quotes erd
\end_inset

,
\end_layout

\begin_layout Quote
\begin_inset Quotes eld
\end_inset

contents
\begin_inset Quotes erd
\end_inset

:
\begin_inset Quotes erd
\end_inset

...
\begin_inset Quotes erd
\end_inset

}
\end_layout

\begin_layout Section
key
\end_layout

\begin_layout Standard
You probably noticed that there was no key exchange in the 
\begin_inset Quotes eld
\end_inset

encrypted
\begin_inset Quotes erd
\end_inset

 message.
 That's because we do that with 
\begin_inset Quotes eld
\end_inset

key
\begin_inset Quotes erd
\end_inset

 messages, which work a bit like 
\begin_inset Quotes eld
\end_inset

select
\begin_inset Quotes erd
\end_inset

 messages.
 Key messages exchange public keys between ends of a connection, and are
 also used to acknowledge that a key has been recieved.
 A key can be set to a string or to null.
\end_layout

\begin_layout Standard
Encryption should not be used on a key until it has been acknowledged.
\end_layout

\begin_layout Quote
{
\begin_inset Quotes erd
\end_inset

type
\begin_inset Quotes erd
\end_inset

:
\begin_inset Quotes erd
\end_inset

key
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

mine
\begin_inset Quotes erd
\end_inset

:
\begin_inset Quotes erd
\end_inset

...
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

yours
\begin_inset Quotes erd
\end_inset

:null}
\end_layout

\begin_layout Part
Objects
\end_layout

\begin_layout Section
Address
\end_layout

\begin_layout Standard
Addresses are 
\emph on
the
\emph default
 way to specify which tree in a document you're talking about.
 Addresses are arrays, with an optional shortcut as the first element.
\end_layout

\begin_layout Quote
[
\end_layout

\begin_deeper
\begin_layout Quote
\begin_inset Quotes eld
\end_inset

2#5235
\begin_inset Quotes erd
\end_inset

,
\end_layout

\begin_layout Quote
[4,"carbide ma46456"]
\end_layout

\end_deeper
\begin_layout Quote
]
\end_layout

\begin_layout Quotation

\emph on
A 2-element address starting at shortcut 
\begin_inset Quotes eld
\end_inset

2#5235
\begin_inset Quotes erd
\end_inset

 and progressing to a subtree in 5235 (position 4, key 
\begin_inset Quotes eld
\end_inset

carbide ma46456
\begin_inset Quotes erd
\end_inset

, which happens to have a value of 
\begin_inset Quotes eld
\end_inset

carbide manufacturing
\begin_inset Quotes erd
\end_inset

.)
\end_layout

\begin_layout Standard
When no shortcut address is given, special address 
\begin_inset Quotes eld
\end_inset

0#root
\begin_inset Quotes erd
\end_inset

 is assumed.
 This refers to the single root element (which has value 
\begin_inset Quotes eld
\end_inset


\begin_inset Quotes erd
\end_inset

) every BCP document has.
 So in these cases, the very first element progresses down the tree from
 the root node.
 Regular elements are in the form of 2-element arrays of [pos, key].
\end_layout

\begin_layout Section
Instruction
\end_layout

\begin_layout Standard
Instructions are one of the integral pieces of ConcurrenTree technology.
 Their JSON serialization is very compact and much less semantically friendly
 than most of BCP, but bandwidth is a big concern when you're sending (potential
ly) thousands of instructions.
\end_layout

\begin_layout Quote
[0, [[0,
\begin_inset Quotes erd
\end_inset

Have you e5168
\begin_inset Quotes erd
\end_inset

]], 3, [5,7] ]
\end_layout

\begin_layout Quote
[1, [[0,
\begin_inset Quotes erd
\end_inset

Have you e5168
\begin_inset Quotes erd
\end_inset

]], 4, 
\begin_inset Quotes eld
\end_inset

querque, by W
\begin_inset Quotes erd
\end_inset

]
\end_layout

\begin_layout Quotation

\emph on
Two examples: a deletion of positions 3 and range 5-7, and an insertion
 at position 4 of a node with value 
\begin_inset Quotes eld
\end_inset


\emph default
querque, by W
\emph on

\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
An instruction always starts off with an integer typecode and an address.
 The typecode specifies what kind of instruction it is.
\end_layout

\begin_layout Description
0 Deletion.
 Arguments 3-n are ints and ranges.
 A range is a 2 element array, start and end inclusive.
 You must have at least one range or int.
\end_layout

\begin_layout Description
1 Insertion.
 Third argument is the position in the parent node, fourth argument is the
 immutable child value.
\end_layout

\begin_layout Section
Tree
\end_layout

\begin_layout Standard
Used in 
\begin_inset Quotes eld
\end_inset

era
\begin_inset Quotes erd
\end_inset

 messages, tree structures describe a tree and its descendents in a structurally
 minimalist way.
\end_layout

\begin_layout Quote
[
\end_layout

\begin_deeper
\begin_layout Quote
\begin_inset Quotes eld
\end_inset

I feel dis
\begin_inset Quotes erd
\end_inset

, 
\end_layout

\begin_layout Quote
[
\begin_inset Quotes eld
\end_inset

tres
\begin_inset Quotes erd
\end_inset

, [] ],
\end_layout

\begin_layout Quote
\begin_inset Quotes eld
\end_inset

sed.
\begin_inset Quotes erd
\end_inset

,
\end_layout

\begin_layout Quote
[[0, 6]]
\end_layout

\end_deeper
\begin_layout Quote
]
\end_layout

\begin_layout Quotation

\emph on
This example describes a node that has immutable value 
\begin_inset Quotes eld
\end_inset


\emph default
I feel dissed.
\emph on

\begin_inset Quotes erd
\end_inset

, and then through a child node and a deletion over the range [0,6], is
 transformed into 
\begin_inset Quotes eld
\end_inset


\emph default
distressed.
\emph on

\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
The tree is described as an array.
 The tree array can contain strings and children, always ending with a deletions
et made of ints, and ranges.
 The ints and ranges represent exactly what they do in deletion instructions.
\end_layout

\begin_layout Standard
The strings represent pieces of the tree's immutable string.
 Each tree array string is a contiguous piece of the tree uninterrupted
 by children.
 At positions where there are children, the strings must be interrupted
 with those children, in any order (order is inferred by the child's value).
\end_layout

\begin_layout Section
Era
\end_layout

\begin_layout Standard
An era is a container for trees.
 It's nothing more than a dict keyed on shortcut address, with Tree arrays
 as values (see above).
\end_layout

\begin_layout Quote
{
\begin_inset Quotes erd
\end_inset

1288
\begin_inset Quotes erd
\end_inset

:[ 
\emph on
...tree data...

\emph default
 ]}
\end_layout

\begin_layout Standard
Era messages use these to relate trees that are on the same layer, but with
 no other guarantees of being related.
\end_layout

\begin_layout Section
Flat
\end_layout

\begin_layout Standard
A flat gives an era its context, usually for rendering more than correctness.
 An era is a set of trees on the same layer, but without a basic tree describing
 all previous layers and how they connect to the era, it's kinda useless
 information.
\end_layout

\begin_layout Standard
A flat is a compressed description of zero or more eras that you can plug
 an era into, without having to actually know what's in those eras.
\end_layout

\begin_layout Quote
[
\begin_inset Quotes eld
\end_inset

A
\begin_inset Quotes erd
\end_inset

, 45899,
\begin_inset Quotes erd
\end_inset

 example of a 
\begin_inset Quotes erd
\end_inset

, 112,
\begin_inset Quotes eld
\end_inset

flat.
\begin_inset Quotes erd
\end_inset

]
\end_layout

\begin_layout Quotation

\emph on
All the tree data in era 0 has been flattened into a compact representation
 that includes shortcut references in the correct order and positions.
\end_layout

\begin_layout Standard
The Flat is very similar to the tree, except instead of child trees, it
 has integer references to shortcuts.
 The main part of the shortcut is always an int, so we just express shortcut
 refs as ints, and use the type to imply that they're not part of the Flat's
 value.
\end_layout

\begin_layout Part
Errors
\end_layout

\begin_layout Standard
All errors have roughly the same format:
\end_layout

\begin_layout Quote
{
\end_layout

\begin_deeper
\begin_layout Quote
\begin_inset Quotes erd
\end_inset

type
\begin_inset Quotes erd
\end_inset

:
\begin_inset Quotes erd
\end_inset

error
\begin_inset Quotes erd
\end_inset

, 
\end_layout

\begin_layout Quote
\begin_inset Quotes eld
\end_inset

code
\begin_inset Quotes erd
\end_inset

:451, 
\end_layout

\begin_layout Quote
\begin_inset Quotes eld
\end_inset

detail
\begin_inset Quotes erd
\end_inset

:
\begin_inset Quotes erd
\end_inset

Bad message
\begin_inset Quotes erd
\end_inset


\end_layout

\end_deeper
\begin_layout Quote
}
\end_layout

\begin_layout Standard
An integer code representing the BCP error that has occurred, a more detailed
 textual message explaining the error, and the type is always 
\begin_inset Quotes eld
\end_inset

error
\begin_inset Quotes erd
\end_inset

.
 Some errors also return an optional 
\begin_inset Quotes eld
\end_inset

data
\begin_inset Quotes erd
\end_inset

 property, the type and meaning depends on the error code.
 However, even on these error codes, the data property is still 
\emph on
optional,
\emph default
 therefore you must not depend on it being supplied.
\end_layout

\begin_layout Standard
The code prefixes are very roughly based on HTTP error codes to allow the
 more well-known ones to coincide (for example, BCP 404 is very closely
 comparable to HTTP 404).
\end_layout

\begin_layout Standard
A full, more up-to-date list of error types will be available in the root
 of this repository under the name of 
\begin_inset Quotes eld
\end_inset

ErrorCodes.txt
\begin_inset Quotes erd
\end_inset

, but here are the headlines:
\end_layout

\begin_layout Section
1XX : Connection Status
\end_layout

\begin_layout Standard
These messages are the only ones that are rarely actually sent over the
 wire.
 They are optionally generated by the backend code that maintains and manages
 a connection, to signal the BCP-based code when the state of the connection
 changes.
 It's largely undeveloped right now and totally optional.
\end_layout

\begin_layout Section
2XX : Unused
\end_layout

\begin_layout Standard
Official BCP does not use the 2XX series because it simply doesn't need
 it.
 Therefore we're reserving it for proprietary extensions to the BCP message
 set.
 That's right - you can make up your own errors for the 2XX series based
 on your custom BCP extensions, and rest comfortably knowing that there
 will never be an official BCP version that conflicts with them.
 6XX and above are not reserved in this way.
\end_layout

\begin_layout Section
3XX : Authentication Errors
\end_layout

\begin_layout Standard
Authentication is such a big and complicated thing, it really needed its
 own error series.
 So we made one.
\end_layout

\begin_layout Section
4XX : Foreign Error
\end_layout

\begin_layout Standard
When the remote end messes up, send them a 4XX error message to let them
 know.
 In some cases this will match the client/server error codes of HTTP, and
 certainly matches up with the intention of the series, but we use the Foreign/L
ocal terminology instead to prevent confusion in P2P contexts (which ConcurrenTr
ee was originally invented for).
\end_layout

\begin_layout Standard
400 is a general error for some unspecified problem with the foreign message,
 401-449 are reserved for semantic and advanced errors, and 450-499 are
 for parsing errors.
 The distinction is a bit like the difference between a pumpkin pie that's
 clearly been run over by a truck and inedible (unparsable), and a nice,
 friendly-looking pie with a bunch of razor blades in it (parsable, but
 with bad data inside).
\end_layout

\begin_layout Description
400 Bad message
\end_layout

\begin_layout Description
401 Unknown message type
\end_layout

\begin_layout Description
402 Document moved temporarily
\begin_inset Foot
status open

\begin_layout Plain Layout
402 and 403 supply the alternate location as the data property.
\end_layout

\end_inset


\end_layout

\begin_layout Description
403 Document moved permanently
\end_layout

\begin_layout Description
404 Document not found by that name
\begin_inset Foot
status open

\begin_layout Plain Layout
Returns failed docname as data property
\end_layout

\end_inset


\end_layout

\begin_layout Description
451 Could not parse JSON
\end_layout

\begin_layout Description
452 Missing required argument
\begin_inset Foot
status open

\begin_layout Plain Layout
452 and 453 return argument name and type as two element string array.
\end_layout

\end_inset


\end_layout

\begin_layout Description
453 Wrong argument type
\end_layout

\begin_layout Description
454 Wrong JSON root type
\begin_inset Foot
status open

\begin_layout Plain Layout
Only JSON objects ({}) are allowed to be messages.
\end_layout

\end_inset


\end_layout

\begin_layout Section
5XX : Local Error
\end_layout

\begin_layout Standard
This series is for when responsibility for the error rests on the local
 side.
 It's a lot nicer to send a vague 500 error to the remote end when something
 goes wrong than to just drop the connection, or try to ignore it.
 Of course, the more specific you can be with your error, the better equipped
 the remote end is to handle it.
\end_layout

\begin_layout Description
500 Unspecified local error
\end_layout

\begin_layout Description
501 Service not supported
\begin_inset Foot
status open

\begin_layout Plain Layout
BCP's message set is divided into services.
 This error tells you that the service named in the data property is not
 supported at this location, as opposed to 503, where it is intended to
 be available but is not, due to such things as high traffic load.
\end_layout

\end_inset


\end_layout

\begin_layout Description
502 Resource not found
\begin_inset Foot
status open

\begin_layout Plain Layout
Like 404, but more general, for things like eras and lookup requests.
\end_layout

\end_inset


\end_layout

\begin_layout Description
503 Service recognized but unavailable
\end_layout

\begin_layout Description
504 Request timeout
\end_layout

\begin_layout Description
505 BCP version not supported
\end_layout

\end_body
\end_document
